#+title: Operating System Configurations
#+subtitle: In One Org File
#+property: header-args :noweb yes :mkdirp yes :comments noweb
#+startup: hideblocks

This file is a central place for my Operating System (OS) configurations.

* Desktop environment

My custom desktop environment mainly consists of

- Emptty :: a Display Manager (DM)
- XMonad :: a Window Manager (WM)
- Taffybar :: a graphical Status Bar
- Picom :: a Compositor

I also use these utilities

- XScreenSaver :: a collection of screensavers
- feh :: an image viewer to manage wallpaper
- keyd :: a system wide key mapping daemon
- autorandr :: a display configuration manager
- optimus-manager :: a GPU switching helper
- fcitx5 :: an input method framework (Free Chinese Input Toy of X)

The following sections describes the configuration for each of these software.

** Emptty

#+caption: Emptty system-wide configuration
#+begin_src conf :tangle /sudo::/etc/emptty/conf
  # TTY, where emptty will start.
  TTY_NUMBER=7

  # Enables switching to defined TTY number.
  SWITCH_TTY=true

  # Enables printing of /etc/issue in daemon mode.
  PRINT_ISSUE=true

  # Enables printing of default motd, /etc/emptty/motd or /etc/emptty/motd-gen.sh.
  PRINT_MOTD=true

  # Preselected user, if AUTOLOGIN is enabled, this user is logged in.
  DEFAULT_USER=xchen

  # Enables Autologin, if DEFAULT_USER is defined and part of nopasswdlogin group. Possible values are "true" or "false".
  AUTOLOGIN=false

  # The default session used, if Autologin is enabled. If session is not found in list of session, it proceeds to manual selection.
  # AUTOLOGIN_SESSION=i3

  # If Autologin is enabled and session does not start correctly, the number of retries in short period is kept to eventually stop the infinite loop of restarts. -1 is for infinite retries, 0 is for no retry.
  # AUTOLOGIN_MAX_RETRY=2

  # Default LANG, if user does not have set own in init script.
  #LANG=en_US.UTF-8

  # Starts desktop with calling "dbus-launch".
  DBUS_LAUNCH=false

  # Starts Xorg desktop with calling "~/.xinitrc" script, if is true, file exists and selected WM/DE is Xorg session, it overrides DBUS_LAUNCH.
  XINITRC_LAUNCH=false

  # Prints available WM/DE each on new line instead of printing on single line.
  VERTICAL_SELECTION=false

  # Defines the way, how is logging handled. Possible values are "default", "appending" or "disabled".
  #LOGGING=default

  # Overrides path of log file
  #LOGGING_FILE=/var/log/emptty/[TTY_NUMBER].log

  # Arguments passed to Xorg server.
  XORG_ARGS=-ardelay 200 -arinterval 30

  # Allows to use dynamic motd script to generate custom MOTD.
  #DYNAMIC_MOTD=false

  # Allows to override default path to dynamic motd.
  #DYNAMIC_MOTD_PATH=/etc/emptty/motd-gen.sh

  # Allows to override default path to static motd.
  #MOTD_PATH=/etc/emptty/motd

  # Foreground color, available only in daemon mode.
  #FG_COLOR=LIGHT_BLACK

  # Background color, available only in daemon mode.
  #BG_COLOR=BLACK

  # Script started before Display (Xorg/Wayland) starts.
  # NOTE: The script is started as default user; in daemon mode it means root.
  DISPLAY_START_SCRIPT=/usr/bin/prime-offload

  # Script started after Display (Xorg/Wayland) stops.
  # NOTE: The script is started as default user; in daemon mode it means root.
  DISPLAY_STOP_SCRIPT=/usr/bin/prime-switch

  # Enables numlock in daemon mode. Possible values are "true" or "false".
  #ENABLE_NUMLOCK=false

  # Defines the way, how is logging of session errors handled. Possible values are "default", "appending" or "disabled".
  SESSION_ERROR_LOGGING=default

  # Overrides path of session errors log file
  #SESSION_ERROR_LOGGING_FILE=/var/log/emptty/session-errors.[TTY_NUMBER].log

  # If set true, it will not use `.emptty-xauth` file, but the standard `~/.Xauthority` file. This allows to handle xauth issues.
  #DEFAULT_XAUTHORITY=false

  #If set true, Xorg will be started as rootless, if system allows and emptty is running in daemon mode.
  #ROOTLESS_XORG=false

  #If set true, environemntal groups are printed to differ Xorg/Wayland/Custom/UserCustom desktops.
  IDENTIFY_ENVS=false
#+end_src

#+caption: Emptty user configuration
#+begin_src shell :tangle ~/.config/emptty :shebang "#!/bin/sh"
  Selection=true

  userresources=$HOME/.Xresources
  usermodmap=$HOME/.Xmodmap
  sysresources=/etc/X11/xinit/.Xresources
  sysmodmap=/etc/X11/xinit/.Xmodmap

  # merge in defaults and keymaps

  if [ -f $sysresources ]; then
      xrdb -merge $sysresources
  fi

  if [ -f $sysmodmap ]; then
      xmodmap $sysmodmap
  fi

  if [ -f "$userresources" ]; then
      xrdb -merge "$userresources"
  fi

  if [ -f "$usermodmap" ]; then
      xmodmap "$usermodmap"
  fi

  if [ -d /etc/X11/xinit/xinitrc.d ] ; then
      for f in /etc/X11/xinit/xinitrc.d/?*.sh ; do
          [ -x "$f" ] && . "$f"
      done
      unset f
  fi

  . /etc/profile
  . ~/.profile
  . ~/.xprofile

  exec $@
#+end_src

#+caption: User xprofile
#+begin_src shell :tangle ~/.xprofile :shebang "#!/bin/sh"
  if [ $XDG_SESSION_DESKTOP = Emacs ] || [ $XDG_SESSION_DESKTOP = Xmonad ]; then
      autorandr --force --change

      export _JAVA_AWT_WM_NONREPARENTING=1

      xsetroot -cursor_name left_ptr
      picom -b
      xscreensaver --no-splash &

      if [ $XDG_SESSION_DESKTOP = Xmonad ]; then
          status-notifier-watcher &
          keyd-application-mapper -d
          systemctl --user start wallpaper.service
          systemctl --user start wallpaper@15.timer
      fi

      fcitx5 -d
  fi
#+end_src

** XMonad

[[https://xmonad.org/][XMonad]] is

#+begin_quote
A dynamically tiling X11 window manager that is written and configured in Haskell.
#+end_quote

and its users said

#+begin_quote
That was easy. xmonad rocks!
#+end_quote

I do not think XMonad is easy to use, but it indeed rocks because it helps me learn Haskell. XMonad is in fact a Haskell library. Users must write a program in Haskell which uses the XMonad library. The program is then compiled into an executable binary using the Glasgow Haskell Compiler (GHC). Essentially, users need to write their own window manager program in Haskell.

This approach makes XMonad extremely extendable. The flip side is that users need to learn the library and the Haskell language to customise it, which could be more difficult than remembering a few key bindings.

I like learning new things. I like Haskell. I have a lot of free time (really?). Therefore, I use XMonad. However, I would not recommend those who do not have the same motivations to use XMonad.

On the GNU/Linux distribution I use, [[https://archlinux.org/][Arch Linux]], packages ~xmonad~ and ~xmonad-contrib~ are required.

#+caption: My XMonad program
#+begin_src haskell :tangle ~/.config/xmonad/xmonad.hs

  import System.Taffybar.Support.PagerHints
  import XMonad
  import XMonad.Actions.Minimize
  import XMonad.Actions.PhysicalScreens
  import XMonad.Hooks.EwmhDesktops
  import XMonad.Hooks.ManageDocks
  import XMonad.Hooks.StatusBar
  import XMonad.Layout.BoringWindows
  import XMonad.Layout.Minimize
  import XMonad.Layout.Spacing
  import XMonad.Layout.TwoPanePersistent
  import qualified XMonad.StackSet as W
  import XMonad.Util.EZConfig
  import XMonad.Util.SpawnOnce

  main :: IO ()
  main = do
    xmonad
      . withSB mySB
      . ewmh
      . docks
      . pagerHints
      $ myConfig

  myConfig =
    def
      { modMask = mod4Mask
      , layoutHook = myLayout
      , startupHook = myStartupHook
      , borderWidth = 0
      , terminal = "emacsclient -e \"(spawn-eshell \\\"$DISPLAY\\\")\""
      }
      `additionalKeysP` myKeys

  mySB :: StatusBarConfig
  mySB = statusBarGeneric "taffybar" mempty

  myStartupHook :: X ()
  myStartupHook = do
    spawnOnce "emacsclient -c"

  myKeys :: [(String, X ())]
  myKeys =
    [ ("M-o", onNextNeighbour def W.view)
    , ("M-S-o", onNextNeighbour def W.shift)
    , ("M-j", focusDown)
    , ("M-k", focusUp)
    , ("M-m", focusMaster)
    , ("M-0", withFocused minimizeWindow)
    , ("M-S-0", withLastMinimized maximizeWindowAndFocus)
    , ("M-p", spawn "rofi -show drun")
    , ("M-S-p", spawn "rofi -show run")
    , ("M-x", spawn "rofi -show window")
    , ("M-S-l", spawn "xscreensaver-command -lock")
    , ("<XF86AudioRaiseVolume>", spawn "amixer set Master 1%+")
    , ("<XF86AudioLowerVolume>", spawn "amixer set Master 1%-")
    , ("<XF86AudioMute>", spawn "amixer set Master toggle")
    ,
      ( "M-b"
      , spawn
          "dbus-send \
          \--type=method_call \
          \--dest=taffybar.toggle \
          \/taffybar/toggle \
          \taffybar.toggle.toggleCurrent"
      )
    , ("M-d", spawn "autorandr --cycle")
    ]

  myLayout =
    boringAuto . minimize . avoidStruts . smartSpacingWithEdge 10 $
      twoPane ||| Full ||| tiled ||| Mirror tiled
   where
    twoPane = TwoPanePersistent Nothing (3 / 100) (1 / 2)
    tiled = Tall 1 (3 / 100) (1 / 2)
#+end_src

** Taffybar

[[https://github.com/taffybar/taffybar][Taffybar]] is a [[https://www.gtk.org/][GTK]] based status bar. It is an alternative to the mostly text-based [[https://codeberg.org/xmobar/xmobar][xmobar]]. It is somewhat buggy and crashes from time to time. It is one of the two popular Haskell status bar libraries (the other one is xmobar).

#+begin_src haskell :tangle ~/.config/taffybar/taffybar.hs
  {-# LANGUAGE OverloadedStrings #-}

  import Control.Monad.IO.Class
  import Data.Default
  import qualified GI.Gtk as Gtk
  import System.Environment
  import System.Process
  import System.Taffybar
  import System.Taffybar.DBus
  import System.Taffybar.Example
  import System.Taffybar.SimpleConfig
  import System.Taffybar.Util
  import System.Taffybar.Widget
  import System.Taffybar.Widget.Generic.PollingGraph

  main :: IO ()
  main = do
    dyreTaffybar
      . withLogServer
      . withToggleServer
      . toTaffyConfig
      $ mySimpleConfig
        { cssPaths = ["~/.config/taffybar/taffybar.css"]
        }

  buildBoxFromWidgets widgets =
    do
      box <-
        foldr
          ( \child parent -> do
              childBox <- child
              parentBox <- parent
              Gtk.containerAdd parentBox childBox
              return parentBox
          )
          (Gtk.boxNew Gtk.OrientationHorizontal 0)
          widgets
      Gtk.widgetShowAll box
      Gtk.toWidget box

  mySimpleConfig :: SimpleTaffyConfig
  mySimpleConfig =
    let workspaces =
          workspacesNew
            def
              { minIcons = 1
              , widgetGap = 0
              , showWorkspaceFn = hideEmpty
              }
        sysinfo =
          let cpu = pollingGraphNew cpuCfg 0.5 cpuCallback
              mem = pollingGraphNew memCfg 1 memCallback
              net = networkGraphNew netCfg Nothing
           in buildBoxFromWidgets (map (>>= buildPadBox) [net, mem, cpu]) >>= buildPadBox
        clock =
          textClockNewWith
            def
              { clockTimeZone = Nothing
              , clockTimeLocale = Nothing
              , clockFormatString = "<b>%a %-d %b</b>  %R"
              }
        windows = windowsNew def
        notifications = notifyAreaNew def
        tray = do
          widget <- sniTrayNew
          liftIO $ do
            spawnCommand "nm-applet --indicator"
            spawnCommand "nextcloud --background"
          return widget
        weather =
          weatherNew
            (defaultWeatherConfig "ESCM")
              { weatherTemplate = "$stationPlace$ $tempC$ °C"
              }
            10
     in def
          { monitorsAction = usePrimaryMonitor
          , startWidgets = [workspaces, windows >>= buildPadBox]
          , centerWidgets = map (>>= buildPadBox) [clock, notifications]
          , endWidgets =
              [ buildBoxFromWidgets [batteryIconNew, tray] >>= buildContentsBox
              , sysinfo
              , weather >>= buildPadBox
              ]
          , barPosition = Top
          , barPadding = 0
          , barHeight = ScreenRatio $ 4 / 100
          , widgetSpacing = 16
          }
#+end_src

** Picom

#+begin_src conf :tangle ~/.config/picom.conf
  #################################
  #             Shadows           #
  #################################


  # Enabled client-side shadows on windows. Note desktop windows
  # (windows with '_NET_WM_WINDOW_TYPE_DESKTOP') never get shadow,
  # unless explicitly requested using the wintypes option.
  #
  # shadow = false
  shadow = true;

  # The blur radius for shadows, in pixels. (defaults to 12)
  # shadow-radius = 12

  # The opacity of shadows. (0.0 - 1.0, defaults to 0.75)
  # shadow-opacity = .75

  # The left offset for shadows, in pixels. (defaults to -15)
  # shadow-offset-x = -15
  shadow-offset-x = -15;

  # The top offset for shadows, in pixels. (defaults to -15)
  # shadow-offset-y = -15
  shadow-offset-y = -15;

  # Red color value of shadow (0.0 - 1.0, defaults to 0).
  # shadow-red = 0

  # Green color value of shadow (0.0 - 1.0, defaults to 0).
  # shadow-green = 0

  # Blue color value of shadow (0.0 - 1.0, defaults to 0).
  # shadow-blue = 0

  # Hex string color value of shadow (#000000 - #FFFFFF, defaults to #000000). This option will override options set shadow-(red/green/blue)
  # shadow-color = "#000000"

  # Specify a list of conditions of windows that should have no shadow.
  #
  # examples:
  #   shadow-exclude = "n:e:Notification";
  #
  # shadow-exclude = []
  shadow-exclude = [
    "name = 'Notification'",
    "class_g = 'Conky'",
    "class_g ?= 'Notify-osd'",
    "class_g = 'Cairo-clock'",
    "_GTK_FRAME_EXTENTS@:c",
    "window_type = 'dock'",
    "class_g = 'Nextcloud'",
    "class_g = 'Rofi'",
    "class_g = 'firefox' && argb"
  ];

  # Specify a list of conditions of windows that should have no shadow painted over, such as a dock window.
  # clip-shadow-above = []

  # Specify a X geometry that describes the region in which shadow should not
  # be painted in, such as a dock window region. Use
  #    shadow-exclude-reg = "x10+0+0"
  # for example, if the 10 pixels on the bottom of the screen should not have shadows painted on.
  #
  # shadow-exclude-reg = ""

  # Crop shadow of a window fully on a particular Xinerama screen to the screen.
  # xinerama-shadow-crop = false


  #################################
  #           Fading              #
  #################################


  # Fade windows in/out when opening/closing and when opacity changes,
  #  unless no-fading-openclose is used.
  # fading = false
  fading = true;

  # Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)
  # fade-in-step = 0.028
  fade-in-step = 0.16;

  # Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
  # fade-out-step = 0.03
  fade-out-step = 0.02;

  # The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
  # fade-delta = 10
  fade-delta = 2;

  # Specify a list of conditions of windows that should not be faded.
  # fade-exclude = []

  # Do not fade on window open/close.
  # no-fading-openclose = false
  no-fading-openclose = true;

  # Do not fade destroyed ARGB windows with WM frame. Workaround of bugs in Openbox, Fluxbox, etc.
  # no-fading-destroyed-argb = false


  #################################
  #   Transparency / Opacity      #
  #################################


  # Opacity of inactive windows. (0.1 - 1.0, defaults to 1.0)
  # inactive-opacity = 1.0
  inactive-opacity = 0.8;

  # Opacity of window titlebars and borders. (0.1 - 1.0, disabled by default)
  # frame-opacity = 1.0
  frame-opacity = 0.9;

  # Let inactive opacity set by -i override the '_NET_WM_WINDOW_OPACITY' values of windows.
  # inactive-opacity-override = true
  inactive-opacity-override = false;

  # Default opacity for active windows. (0.0 - 1.0, defaults to 1.0)
  # active-opacity = 1.0

  # Dim inactive windows. (0.0 - 1.0, defaults to 0.0)
  # inactive-dim = 0.0

  # Specify a list of conditions of windows that should never be considered focused.
  # focus-exclude = []
  focus-exclude = [ "class_g = 'Cairo-clock'" ];

  # Use fixed inactive dim value, instead of adjusting according to window opacity.
  # inactive-dim-fixed = 1.0

  # Specify a list of opacity rules, in the format `PERCENT:PATTERN`,
  # like `50:name *= "Firefox"`. picom-trans is recommended over this.
  # Note we don't make any guarantee about possible conflicts with other
  # programs that set '_NET_WM_WINDOW_OPACITY' on frame or client windows.
  # example:
  #    opacity-rule = [ "80:class_g = 'URxvt'" ];
  #
  opacity-rule = [ "100:class_g = 'Rofi'" ];


  #################################
  #           Corners             #
  #################################

  # Sets the radius of rounded window corners. When > 0, the compositor will
  # round the corners of windows. Does not interact well with
  # `transparent-clipping`.
  # corner-radius = 0
  corner-radius = 10;

  # Exclude conditions for rounded corners.
  rounded-corners-exclude = [
    "window_type = 'dock'",
    "window_type = 'desktop'"
  ];


  #################################
  #     Background-Blurring       #
  #################################

  blur:
  {
    method = "gaussian";
    size = 64;
    deviation = 32;
  };

  # Parameters for background blurring, see the *BLUR* section for more information.
  # blur-method =
  # blur-size = 12
  #
  # blur-deviation = false
  #
  # blur-strength = 5

  # Blur background of semi-transparent / ARGB windows.
  # Bad in performance, with driver-dependent behavior.
  # The name of the switch may change without prior notifications.
  #
  # blur-background = false

  # Blur background of windows when the window frame is not opaque.
  # Implies:
  #    blur-background
  # Bad in performance, with driver-dependent behavior. The name may change.
  #
  # blur-background-frame = false


  # Use fixed blur strength rather than adjusting according to window opacity.
  # blur-background-fixed = false


  # Specify the blur convolution kernel, with the following format:
  # example:
  #   blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";
  #
  # blur-kern = ""
  blur-kern = "3x3box";


  # Exclude conditions for background blur.
  # blur-background-exclude = []
  blur-background-exclude = [
    "window_type = 'dock'",
    "window_type = 'desktop'",
    "_GTK_FRAME_EXTENTS@:c"
  ];

  #################################
  #       General Settings        #
  #################################

  # Daemonize process. Fork to background after initialization. Causes issues with certain (badly-written) drivers.
  # daemon = false

  # Specify the backend to use: `xrender`, `glx`, or `xr_glx_hybrid`.
  # `xrender` is the default one.
  #
  # backend = "glx"
  backend = "glx";

  # Enable/disable VSync.
  # vsync = false
  vsync = true;

  # Enable remote control via D-Bus. See the *D-BUS API* section below for more details.
  # dbus = false

  # Try to detect WM windows (a non-override-redirect window with no
  # child that has 'WM_STATE') and mark them as active.
  #
  # mark-wmwin-focused = false
  # mark-wmwin-focused = true;

  # Mark override-redirect windows that doesn't have a child window with 'WM_STATE' focused.
  # mark-ovredir-focused = false
  mark-ovredir-focused = false;

  # Try to detect windows with rounded corners and don't consider them
  # shaped windows. The accuracy is not very high, unfortunately.
  #
  # detect-rounded-corners = false
  detect-rounded-corners = true;

  # Detect '_NET_WM_WINDOW_OPACITY' on client windows, useful for window managers
  # not passing '_NET_WM_WINDOW_OPACITY' of client windows to frame windows.
  #
  # detect-client-opacity = false

  # Use EWMH '_NET_ACTIVE_WINDOW' to determine currently focused window,
  # rather than listening to 'FocusIn'/'FocusOut' event. Might have more accuracy,
  # provided that the WM supports it.
  #
  # use-ewmh-active-win = false

  # Unredirect all windows if a full-screen opaque window is detected,
  # to maximize performance for full-screen windows. Known to cause flickering
  # when redirecting/unredirecting windows.
  #
  # unredir-if-possible = false

  # Delay before unredirecting the window, in milliseconds. Defaults to 0.
  # unredir-if-possible-delay = 0

  # Conditions of windows that shouldn't be considered full-screen for unredirecting screen.
  # unredir-if-possible-exclude = []

  # Use 'WM_TRANSIENT_FOR' to group windows, and consider windows
  # in the same group focused at the same time.
  #
  # detect-transient = false
  detect-transient = true;

  # Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same
  # group focused at the same time. This usually means windows from the same application
  # will be considered focused or unfocused at the same time.
  # 'WM_TRANSIENT_FOR' has higher priority if detect-transient is enabled, too.
  #
  # detect-client-leader = false

  # Resize damaged region by a specific number of pixels.
  # A positive value enlarges it while a negative one shrinks it.
  # If the value is positive, those additional pixels will not be actually painted
  # to screen, only used in blur calculation, and such. (Due to technical limitations,
  # with use-damage, those pixels will still be incorrectly painted to screen.)
  # Primarily used to fix the line corruption issues of blur,
  # in which case you should use the blur radius value here
  # (e.g. with a 3x3 kernel, you should use `--resize-damage 1`,
  # with a 5x5 one you use `--resize-damage 2`, and so on).
  # May or may not work with *--glx-no-stencil*. Shrinking doesn't function correctly.
  #
  # resize-damage = 1

  # Specify a list of conditions of windows that should be painted with inverted color.
  # Resource-hogging, and is not well tested.
  #
  # invert-color-include = []

  # GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer.
  # Might cause incorrect opacity when rendering transparent content (but never
  # practically happened) and may not work with blur-background.
  # My tests show a 15% performance boost. Recommended.
  #
  glx-no-stencil = true;

  # GLX backend: Avoid rebinding pixmap on window damage.
  # Probably could improve performance on rapid window content changes,
  # but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
  # Recommended if it works.
  #
  # glx-no-rebind-pixmap = false

  # Disable the use of damage information.
  # This cause the whole screen to be redrawn everytime, instead of the part of the screen
  # has actually changed. Potentially degrades the performance, but might fix some artifacts.
  # The opposing option is use-damage
  #
  # no-use-damage = false
  use-damage = true;

  # Use X Sync fence to sync clients' draw calls, to make sure all draw
  # calls are finished before picom starts drawing. Needed on nvidia-drivers
  # with GLX backend for some users.
  #
  # xrender-sync-fence = false

  # GLX backend: Use specified GLSL fragment shader for rendering window contents.
  # See `compton-default-fshader-win.glsl` and `compton-fake-transparency-fshader-win.glsl`
  # in the source tree for examples.
  #
  # glx-fshader-win = ""

  # Force all windows to be painted with blending. Useful if you
  # have a glx-fshader-win that could turn opaque pixels transparent.
  #
  # force-win-blend = false

  # Do not use EWMH to detect fullscreen windows.
  # Reverts to checking if a window is fullscreen based only on its size and coordinates.
  #
  # no-ewmh-fullscreen = false

  # Dimming bright windows so their brightness doesn't exceed this set value.
  # Brightness of a window is estimated by averaging all pixels in the window,
  # so this could comes with a performance hit.
  # Setting this to 1.0 disables this behaviour. Requires --use-damage to be disabled. (default: 1.0)
  #
  # max-brightness = 1.0

  # Make transparent windows clip other windows like non-transparent windows do,
  # instead of blending on top of them.
  #
  # transparent-clipping = false

  # Set the log level. Possible values are:
  #  "trace", "debug", "info", "warn", "error"
  # in increasing level of importance. Case doesn't matter.
  # If using the "TRACE" log level, it's better to log into a file
  # using *--log-file*, since it can generate a huge stream of logs.
  #
  # log-level = "debug"
  log-level = "warn";

  # Set the log file.
  # If *--log-file* is never specified, logs will be written to stderr.
  # Otherwise, logs will to written to the given file, though some of the early
  # logs might still be written to the stderr.
  # When setting this option from the config file, it is recommended to use an absolute path.
  #
  # log-file = "/path/to/your/log/file"

  # Show all X errors (for debugging)
  # show-all-xerrors = false

  # Write process ID to a file.
  # write-pid-path = "/path/to/your/log/file"

  # Window type settings
  #
  # 'WINDOW_TYPE' is one of the 15 window types defined in EWMH standard:
  #     "unknown", "desktop", "dock", "toolbar", "menu", "utility",
  #     "splash", "dialog", "normal", "dropdown_menu", "popup_menu",
  #     "tooltip", "notification", "combo", and "dnd".
  #
  # Following per window-type options are available: ::
  #
  #   fade, shadow:::
  #     Controls window-type-specific shadow and fade settings.
  #
  #   opacity:::
  #     Controls default opacity of the window type.
  #
  #   focus:::
  #     Controls whether the window of this type is to be always considered focused.
  #     (By default, all window types except "normal" and "dialog" has this on.)
  #
  #   full-shadow:::
  #     Controls whether shadow is drawn under the parts of the window that you
  #     normally won't be able to see. Useful when the window has parts of it
  #     transparent, and you want shadows in those areas.
  #
  #   clip-shadow-above:::
  #     Controls wether shadows that would have been drawn above the window should
  #     be clipped. Useful for dock windows that should have no shadow painted on top.
  #
  #   redir-ignore:::
  #     Controls whether this type of windows should cause screen to become
  #     redirected again after been unredirected. If you have unredir-if-possible
  #     set, and doesn't want certain window to cause unnecessary screen redirection,
  #     you can set this to `true`.
  #
  wintypes:
  {
    # tooltip = { shadow=false };
    # popup_menu = { shadow=false };
    # menu = { shadow=false };
    # dropdown_menu = { shadow=false };
    # utility = { shadow=false };
  };
#+end_src
